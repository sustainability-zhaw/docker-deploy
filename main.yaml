- name: setup edge proxy service with SDG
  # speed things up
  gather_facts: false
  hosts: mainnode

  tasks:
  - name: Load service configuration
    include_vars:
      file: /configs/configs.yaml
      name: sdg_config

  - name: Load container sha from config
    include_vars:
      file: /configs/containers.yaml
      name: cicd

  ##
  # Setup External Networks
  #
  # https://docs.ansible.com/ansible/latest/collections/community/docker/docker_network_module.html

  - name: Setup service networks
    docker_network:
      name: "{{ item }}"
      attachable: true
      internal: false
      driver: overlay
      driver_options: 
        encrypted: ""
      state: present
    loop: "{{ sdg_config.networks }}"

  ## 
  # Setup Configs
  # 
  # https://docs.ansible.com/ansible/latest/collections/community/docker/docker_config_module.html

  # `lookup() | string` tells ansible not to parse any of the data but use it as is.

  - name: Setup docker configs
    register: docker_configs
    docker_config:
      name: "{{ item.key }}"
      data: "{{ lookup('file', item.value ) | string }}"
      rolling_versions: true
      versions_to_keep: 2
      state: present
    loop: "{{ sdg_config.configs | dict2items }}"
    loop_control:
      label: "{{ item.key }}"

  - name: Setup docker secrets
    register: docker_secrets
    docker_secret:
      name: "{{ item.key }}"
      data: "{{ lookup('file', item.value ) | string }}"
      rolling_versions: true
      versions_to_keep: 2
      state: present
    loop: "{{ sdg_config.secrets | dict2items }}"
    loop_control:
      label: "{{ item.key }}"

  ## 
  # Flatten the result lists into simple dicts.
  #
  # This step helps the stack deployment.
  #
  # The configs and secret setup results are not usefull for selecting envionrment variables
  # so we create a dict for each of them
  #
  # The two types are kept separately here for debugging purposes. 
  #
  - name: Create dict with config names
    set_fact:
      dconfigs: "{{ dconfigs | default({}) | combine( {item.invocation.module_args.name : item.config_name} ) }}"
    loop: "{{ docker_configs.results }}"
    loop_control:
      label: "{{ item.invocation.module_args.name }}"

  - name: Create dict with secret names
    set_fact:
      dsecrets: "{{ dsecrets | default({}) | combine( {item.invocation.module_args.name : item.secret_name} ) }}"
    loop: "{{ docker_secrets.results }}"
    loop_control:
      label: "{{ item.invocation.module_args.name }}"

  ##
  # Stack deployment
  #
  # https://docs.ansible.com/ansible/latest/collections/community/docker/docker_stack_module.html

  ##
  - name: Deploy the DB stack
    # This stack must be deployed separately because the DB (cluster) needs to launch
    # and the initialisation needs to complete before any of the other services appears on the cluster
    environment:
      # Network names
      STACK_NETWORK: sdgservices
      # Image tags
      DBINIT_SHA: "sha-{{ cicd.containers.schema_sha }}"
      # Constraints
      DBHOST_CONSTRAINT: "{{ sdg_config.dgraph.constraints.host }}"
      # Configs & Secrets
    docker_stack:
      name: dgraph
      state: present
      # state: absent # uninstall the stack
      prune: true
      compose: 
      - "{{ lookup('file', './services/dgraph.yaml' ) | from_yaml }}"

  #
  # Wait a few moments for the db to come up, if it changed
  # 
  # Normally this happens just by waiting for the stack to be deployed.
  # 

  - name: Deploy the service stack
    environment:
      # Network names
      STACK_NETWORK: sdgservices
  
      # Image tags
      DLGW_SHA: "sha-{{ cicd.containers.dlgateway }}"
      IMPORT_AD_SHA: "sha-{{ cicd.containers.adresolver_sha }}"
      KWWEBHOOK_SHA: "sha-{{ cicd.containers.keywords }}"
      DASHBOARD_SHA: "sha-{{ cicd.containers.dashboard_sha }}"
      IMPORT_DC_SHA: "sha-{{ cicd.containers.dspace_sha }}"
      IMPORT_PR_SHA: "sha-{{ cicd.containers.projects_sha }}"
      AUTHOMATOR_SHA: "sha-{{ cicd.containers.authomator_sha }}"
      # DBINIT_SHA: "{{ cicd.containers.schema_sha }}"
      INDEXER_SHA: "sha-{{ cicd.containers.sdgindexer }}"
  
      # Configs
      DASHBOARD_CONFIG: "{{ dconfigs.sdgweb_config }}"
      INDEXER_CONFIG: "{{ dconfigs.sdgindexer_config }}"
      DLGW_CONFIG: "{{ dconfigs.download_gateway_config }}"
      GRAPHIQL_INDEX: "{{ dconfigs.tool_graphiql }}"
      PROXY_CONFIG: "{{ dconfigs.proxy_caddyfile }}"
  
      # Secrets
      ADRESOLVER_CONFIG: "{{ dsecrets.adresolver_config }}"
      IMPORTER_KW_CONFIG: "{{ dsecrets.webhook_config }}"
      IMPORTER_DC_CONFIG: "{{ dsecrets.dspace_extractor_config }}"
      IMPORTER_PR_CONFIG: "{{ dsecrets.projects_extractor_config }}"
      AUTHO_CONFIG: "{{ dsecrets.autho_config }}"
      AUTHOKEYS: "{{ dsecrets.autho_keys }}"
      
    docker_stack:
      name: sdg
      state: present
      # state: absent # uninstall the stack
      prune: true
      compose: 
      - "{{ lookup('file', './services/fullstack.yaml' ) | from_yaml }}"
